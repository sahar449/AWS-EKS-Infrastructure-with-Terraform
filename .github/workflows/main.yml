name: CI/CD Pipeline with Trivy and Terraform

on:
  workflow_dispatch:
    inputs:
      apply_or_destroy:
        description: 'Choose whether to apply or destroy the infrastructure'
        required: true
        default: 'apply' 
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

env:
  image_tag: latest
  aws_region: us-west-2       
  cluster_name: eksdemo-cluster    
  ecr_name: my-app            

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Dependencies (terraform, curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg software-properties-common lsb-release
          # Install Terraform
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.full_app }}
          role-session-name: github-oidc-session
          aws-region: ${{ env.aws_region }}

      - name: Run Trivy Full Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          vuln-type: 'os,library'
          skip-dirs: 'node_modules,.git'
          scanners: 'vuln,config,secret'
          exit-code: '0'
          ignore-unfixed: true
          format: 'table'

      - name: Create ECR Repository if not exists and Push Docker Image
        run: |
          echo "AWS Region: $aws_region"
          echo "ECR Name: $ecr_name"
          echo "Image Tag: $image_tag"

          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO_URI="$ACCOUNT_ID.dkr.ecr.$aws_region.amazonaws.com/$ecr_name"

          echo "Repository URI: $REPO_URI"

          aws ecr describe-repositories --repository-names "$ecr_name" --region "$aws_region" > /dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ecr_name" --region "$aws_region"

          aws ecr get-login-password --region "$aws_region" | docker login --username AWS --password-stdin "$REPO_URI"

          docker build -t my-app:$image_tag .
          docker tag my-app:$image_tag $REPO_URI:$image_tag
          docker push $REPO_URI:$image_tag

      - name: Terraform Init and Apply/Destroy
        run: |
          terraform init
          terraform ${{ github.event.inputs.apply_or_destroy || 'apply' }} -auto-approve

      - name: Helm Upgrade Install
        env:
          cluster_name: ${{ env.cluster_name }}
          aws_region: ${{ env.aws_region }}
          image_tag: ${{ env.image_tag }}
          REPO_URI: ${{ steps.set_repo_uri.outputs.repo_uri }}
        run: |
          aws eks --region "$aws_region" update-kubeconfig --name "$cluster_name"
          helm upgrade --install flask ./flask-app \
            --set image.repository="$REPO_URI" \
            --set image.tag="$image_tag"

